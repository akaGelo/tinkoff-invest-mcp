"""CLI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è sandbox –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Tinkoff Invest."""

import argparse
import asyncio
import os
from pathlib import Path

from dotenv import load_dotenv
from tinkoff.invest import AsyncClient, MoneyValue
from tinkoff.invest.constants import INVEST_GRPC_API_SANDBOX


def load_env_files() -> None:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å .env.test —Ñ–∞–π–ª."""
    env_test = Path(".env.test")
    if env_test.exists():
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é {env_test}")
        load_dotenv(env_test, override=True)


def get_env_var(name: str, required: bool = True) -> str | None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    value = os.environ.get(name)
    if required and not value:
        raise ValueError(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {name}")
    return value


def money_value_to_float(money_value: MoneyValue) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MoneyValue –≤ float."""
    return money_value.units + money_value.nano / 1_000_000_000


async def list_accounts_with_balances(client: AsyncClient) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏."""
    print("üìã –ê–∫–∫–∞—É–Ω—Ç—ã –∏ –±–∞–ª–∞–Ω—Å—ã:")
    try:
        accounts_response = await client.users.get_accounts()
        if not accounts_response.accounts:
            print("   –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return

        for account in accounts_response.accounts:
            print(f"   üí≥ {account.id}")
            try:
                portfolio = await client.operations.get_portfolio(account_id=account.id)
                total_amount = portfolio.total_amount_portfolio
                if total_amount:
                    amount = money_value_to_float(total_amount)
                    print(f"      üí∞ {amount:.2f} {total_amount.currency.upper()}")
                else:
                    print("      üí∞ –ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")


async def create_sandbox_account(client: AsyncClient) -> str:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π sandbox –∞–∫–∫–∞—É–Ω—Ç."""
    print("\nüè¶ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π sandbox –∞–∫–∫–∞—É–Ω—Ç...")
    response = await client.sandbox.open_sandbox_account()
    account_id = response.account_id
    print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {account_id}")

    print("üí∞ –ü–æ–ø–æ–ª–Ω—è—é –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ 100,000 RUB...")
    await client.sandbox.sandbox_pay_in(
        account_id=account_id,
        amount=MoneyValue(currency="rub", units=100_000, nano=0),
    )
    print("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100,000 RUB")

    return account_id


def print_account_info(account_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ."""
    print("\n" + "=" * 50)
    print("üéâ Sandbox –∞–∫–∫–∞—É–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("=" * 50)
    print(f"üìù Account ID: {account_id}")
    print("=" * 50)


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ sandbox –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Tinkoff Invest"
    )
    parser.add_argument(
        "--create", "-c", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    )
    args = parser.parse_args()

    try:
        print("üîß Tinkoff Invest Sandbox Manager")
        print("=" * 35)

        load_env_files()
        token = get_env_var("TINKOFF_TOKEN", required=False)
        if not token:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω TINKOFF_TOKEN –≤ .env.test")
            return

        print(f"üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token[:8]}***")

        async with AsyncClient(token, target=INVEST_GRPC_API_SANDBOX) as client:
            await list_accounts_with_balances(client)

            if args.create:
                account_id = await create_sandbox_account(client)
                print_account_info(account_id)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def cli_main() -> None:
    """Entry point –¥–ª—è CLI –∫–æ–º–∞–Ω–¥—ã."""
    asyncio.run(main())


if __name__ == "__main__":
    cli_main()
