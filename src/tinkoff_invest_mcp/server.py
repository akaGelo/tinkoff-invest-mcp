"""Tinkoff Invest MCP Server implementation."""

from collections.abc import Generator
from contextlib import contextmanager

import fastmcp.utilities.logging
from fastmcp import FastMCP
from tinkoff.invest import Client
from tinkoff.invest.services import Services

from .cache import InstrumentsCache
from .config import TinkoffConfig
from .constants import DEFAULT_INSTRUMENTS_LIMIT, DEFAULT_PAGINATION_OFFSET
from .models import (
    CancelOrderResponse,
    CancelStopOrderResponse,
    CandlesResponse,
    CashBalanceResponse,
    Instrument,
    LastPricesResponse,
    OperationsResponse,
    Order,
    OrderBookResponse,
    OrderResponse,
    PaginatedInstrumentsResponse,
    PortfolioResponse,
    StopOrderResponse,
    StopOrdersResponse,
    TradingSchedulesResponse,
    TradingStatusResponse,
)
from .services import (
    InstrumentsService,
    MarketDataService,
    OperationsService,
    OrdersService,
    PortfolioService,
    StopOrdersService,
)


class TinkoffMCPService:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π MCP —Å–µ—Ä–≤–∏—Å –¥–ª—è Tinkoff Invest API."""

    def __init__(self, config: TinkoffConfig | None = None) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞. –ï—Å–ª–∏ None, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ env
        """
        self.logger = fastmcp.utilities.logging.get_logger("tinkoff-invest-mcp")
        self.logger.info("üöÄ Initializing Tinkoff Invest MCP Service...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = config or TinkoffConfig.from_env()

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.logger.info(f"üìä Configuration: {self.config.mask_sensitive_data()}")

        self.mcp = FastMCP("Tinkoff Invest MCP Server")
        self._initialized = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self._cache = InstrumentsCache(self._client_context)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.portfolio_service = PortfolioService(self.config, self._cache)
        self.operations_service = OperationsService(self.config, self._cache)
        self.market_data_service = MarketDataService(self.config, self._cache)
        self.orders_service = OrdersService(self.config, self._cache)
        self.stop_orders_service = StopOrdersService(self.config, self._cache)
        self.instruments_service = InstrumentsService(self.config, self._cache)

    def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è tools."""
        if self._initialized:
            return

        self.logger.info("üîß Setting up Tinkoff client...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        for service in [
            self.portfolio_service,
            self.operations_service,
            self.market_data_service,
            self.orders_service,
            self.stop_orders_service,
            self.instruments_service,
        ]:
            service.set_initialized(True)

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –≤ __init__
        self.logger.info("üìã Registering MCP tools...")
        self._register_tools()
        self.logger.info("‚úÖ All tools registered successfully")

        self._initialized = True
        self.logger.info("üéØ Tinkoff Invest MCP Service ready to serve!")

    def cleanup(self) -> None:
        """Graceful shutdown –∫–ª–∏–µ–Ω—Ç–∞."""
        self.logger.info("üîå Closing Tinkoff client connection...")
        self._initialized = False

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        for service in [
            self.portfolio_service,
            self.operations_service,
            self.market_data_service,
            self.orders_service,
            self.stop_orders_service,
            self.instruments_service,
        ]:
            service.set_initialized(False)

    @contextmanager
    def _client_context(self) -> Generator[Services, None, None]:
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º."""
        if not self._initialized:
            raise RuntimeError("Service not initialized. Call initialize() first.")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        client = Client(
            self.config.token, target=self.config.target, app_name=self.config.app_name
        )
        with client as client_instance:
            yield client_instance

    def _register_tools(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö MCP tools."""
        # Portfolio tools
        self.mcp.tool()(self.get_portfolio)
        self.mcp.tool()(self.get_cash_balance)

        # Operations tools
        self.mcp.tool()(self.get_operations)

        # Market data tools
        self.mcp.tool()(self.get_last_prices)
        self.mcp.tool()(self.get_candles)
        self.mcp.tool()(self.get_order_book)
        self.mcp.tool()(self.get_trading_status)
        self.mcp.tool()(self.get_trading_schedules)

        # Orders tools
        self.mcp.tool()(self.get_orders)
        self.mcp.tool()(self.create_order)
        self.mcp.tool()(self.cancel_order)

        # Stop orders tools
        self.mcp.tool()(self.get_stop_orders)
        self.mcp.tool()(self.post_stop_order)
        self.mcp.tool()(self.cancel_stop_order)

        # Instruments tools
        self.mcp.tool()(self.find_instrument)
        self.mcp.tool()(self.get_instrument_by_uid)
        self.mcp.tool()(self.get_shares)
        self.mcp.tool()(self.get_bonds)
        self.mcp.tool()(self.get_etfs)

    # –î–µ–ª–µ–≥–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è Portfolio
    def get_portfolio(self) -> PortfolioResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ:
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        - –°—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏ –∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
        - –û–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (P&L) –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        - –û–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è

        Returns:
            PortfolioResponse: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        """
        return self.portfolio_service.get_portfolio()

    def get_cash_balance(self) -> CashBalanceResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö:
        - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–µ
        - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ (–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö)

        Returns:
            CashBalanceResponse: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö
        """
        return self.portfolio_service.get_cash_balance()

    # –î–µ–ª–µ–≥–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è Operations
    def get_operations(
        self,
        from_date: str,
        to_date: str | None = None,
        state: str | None = None,
        instrument_uid: str | None = None,
    ) -> OperationsResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å—á–µ—Ç—É –∑–∞ –ø–µ—Ä–∏–æ–¥.

        Args:
            from_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2024-01-01T00:00:00Z')
            to_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
            state: –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–ø–µ—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
                - OPERATION_STATE_EXECUTED - –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                - OPERATION_STATE_CANCELED - –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            instrument_uid: –§–∏–ª—å—Ç—Ä –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

        Returns:
            OperationsResponse: –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
        """
        return self.operations_service.get_operations(
            from_date, to_date, state, instrument_uid
        )

    # –î–µ–ª–µ–≥–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è Market Data
    def get_last_prices(self, instrument_uids: list[str]) -> LastPricesResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ —Å–ø–∏—Å–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.

        Args:
            instrument_uids: –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

        Returns:
            LastPricesResponse: –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        """
        return self.market_data_service.get_last_prices(instrument_uids)

    def get_candles(
        self,
        instrument_uid: str,
        from_date: str,
        to_date: str | None = None,
        interval: str = "CANDLE_INTERVAL_1_MIN",
    ) -> CandlesResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∑–∞ –ø–µ—Ä–∏–æ–¥.

        Args:
            instrument_uid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            from_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
            to_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π:
                - CANDLE_INTERVAL_1_MIN - 1 –º–∏–Ω—É—Ç–∞
                - CANDLE_INTERVAL_5_MIN - 5 –º–∏–Ω—É—Ç
                - CANDLE_INTERVAL_15_MIN - 15 –º–∏–Ω—É—Ç
                - CANDLE_INTERVAL_HOUR - 1 —á–∞—Å
                - CANDLE_INTERVAL_DAY - 1 –¥–µ–Ω—å

        Returns:
            CandlesResponse: –°–≤–µ—á–∏ –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        """
        return self.market_data_service.get_candles(
            instrument_uid, from_date, to_date, interval
        )

    def get_order_book(self, instrument_uid: str, depth: int = 10) -> OrderBookResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É.

        Args:
            instrument_uid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            depth: –ì–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)

        Returns:
            OrderBookResponse: –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ —Å –±–∏–¥–∞–º–∏ –∏ –∞—Å–∫–∞–º–∏
        """
        return self.market_data_service.get_order_book(instrument_uid, depth)

    def get_trading_status(self, instrument_uid: str) -> TradingStatusResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.

        Args:
            instrument_uid: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

        Returns:
            TradingStatusResponse: –¢–µ–∫—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        """
        return self.market_data_service.get_trading_status(instrument_uid)

    def get_trading_schedules(
        self,
        exchange: str = "MOEX",
        from_date: str | None = None,
        to_date: str | None = None,
    ) -> TradingSchedulesResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤ –±–∏—Ä–∂–∏.

        Args:
            exchange: –ö–æ–¥ –±–∏—Ä–∂–∏ (MOEX, MOEX_PLUS, MOEX_EVENING_WEEKEND, SPB)
            from_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
            to_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞

        Returns:
            TradingSchedulesResponse: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤ –±–∏—Ä–∂–∏
        """
        return self.market_data_service.get_trading_schedules(
            exchange, from_date, to_date
        )

    # –î–µ–ª–µ–≥–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è Orders
    def get_orders(self) -> list[Order]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.

        Returns:
            list[Order]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        """
        return self.orders_service.get_orders()

    def create_order(
        self,
        instrument_id: str,
        quantity: int,
        direction: str,
        order_type: str,
        price: str | float | int | None = None,
    ) -> OrderResponse:
        """–°–æ–∑–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –∑–∞—è–≤–∫—É.

        Args:
            instrument_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:
                - ORDER_DIRECTION_BUY –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                - ORDER_DIRECTION_SELL –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            order_type: –¢–∏–ø –∑–∞—è–≤–∫–∏:
                - ORDER_TYPE_MARKET –¥–ª—è —Ä—ã–Ω–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏
                - ORDER_TYPE_LIMIT –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
            price: –¶–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è ORDER_TYPE_LIMIT –∑–∞—è–≤–æ–∫). –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "15.475", —á–∏—Å–ª–æ 15.475 –∏–ª–∏ int 15

        Returns:
            OrderResponse: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ
        """
        return self.orders_service.create_order(
            instrument_id, quantity, direction, order_type, price
        )

    def cancel_order(self, order_id: str) -> CancelOrderResponse:
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –∑–∞—è–≤–∫—É.

        Args:
            order_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞—è–≤–∫–∏

        Returns:
            CancelOrderResponse: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏
        """
        return self.orders_service.cancel_order(order_id)

    # –î–µ–ª–µ–≥–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è Stop Orders
    def get_stop_orders(self) -> StopOrdersResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ø-–∑–∞—è–≤–æ–∫.

        Returns:
            StopOrdersResponse: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ø-–∑–∞—è–≤–æ–∫
        """
        return self.stop_orders_service.get_stop_orders()

    def post_stop_order(
        self,
        instrument_id: str,
        quantity: int,
        direction: str,
        stop_order_type: str,
        stop_price: str | float | int,
        expiration_type: str,
        price: str | float | int | None = None,
        expire_date: str | None = None,
    ) -> StopOrderResponse:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ø-–∑–∞—è–≤–∫—É.

        Args:
            instrument_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏:
                - STOP_ORDER_DIRECTION_BUY –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                - STOP_ORDER_DIRECTION_SELL –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            stop_order_type: –¢–∏–ø —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏:
                - STOP_ORDER_TYPE_TAKE_PROFIT - —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
                - STOP_ORDER_TYPE_STOP_LOSS - —Å—Ç–æ–ø-–ª–æ—Å—Å
                - STOP_ORDER_TYPE_STOP_LIMIT - —Å—Ç–æ–ø-–ª–∏–º–∏—Ç
            stop_price: –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —á–∏—Å–ª–æ –∏–ª–∏ int
            expiration_type: –¢–∏–ø –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏:
                - STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL - –¥–æ –æ—Ç–º–µ–Ω—ã
                - STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE - –¥–æ –¥–∞—Ç—ã
            price: –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–ª—è STOP_LIMIT). –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —á–∏—Å–ª–æ –∏–ª–∏ int
            expire_date: –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–¥–ª—è GOOD_TILL_DATE). –§–æ—Ä–º–∞—Ç ISO 8601

        Returns:
            StopOrderResponse: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç–æ–ø-–∑–∞—è–≤–∫–µ
        """
        return self.stop_orders_service.post_stop_order(
            instrument_id,
            quantity,
            direction,
            stop_order_type,
            stop_price,
            expiration_type,
            price,
            expire_date,
        )

    def cancel_stop_order(self, stop_order_id: str) -> CancelStopOrderResponse:
        """–û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–æ–ø-–∑–∞—è–≤–∫—É.

        Args:
            stop_order_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏

        Returns:
            CancelStopOrderResponse: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–º–µ–Ω–µ —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏
        """
        return self.stop_orders_service.cancel_stop_order(stop_order_id)

    # –î–µ–ª–µ–≥–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è Instruments
    def find_instrument(self, query: str) -> list[Instrument]:
        """–ù–∞–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É.

        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Ç–∏–∫–µ—Ä, ISIN, FIGI –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)

        Returns:
            list[Instrument]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        return self.instruments_service.find_instrument(query)

    def get_instrument_by_uid(self, uid: str) -> Instrument:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –µ–≥–æ UID.

        Args:
            uid: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

        Returns:
            Instrument: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        """
        return self.instruments_service.get_instrument_by_uid(uid)

    def get_shares(
        self,
        limit: int = DEFAULT_INSTRUMENTS_LIMIT,
        offset: int = DEFAULT_PAGINATION_OFFSET,
    ) -> PaginatedInstrumentsResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π.

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

        Returns:
            PaginatedInstrumentsResponse: –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        """
        return self.instruments_service.get_shares(limit, offset)

    def get_bonds(
        self,
        limit: int = DEFAULT_INSTRUMENTS_LIMIT,
        offset: int = DEFAULT_PAGINATION_OFFSET,
    ) -> PaginatedInstrumentsResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π.

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

        Returns:
            PaginatedInstrumentsResponse: –°–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        """
        return self.instruments_service.get_bonds(limit, offset)

    def get_etfs(
        self,
        limit: int = DEFAULT_INSTRUMENTS_LIMIT,
        offset: int = DEFAULT_PAGINATION_OFFSET,
    ) -> PaginatedInstrumentsResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ETF.

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

        Returns:
            PaginatedInstrumentsResponse: –°–ø–∏—Å–æ–∫ ETF —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        """
        return self.instruments_service.get_etfs(limit, offset)


def create_server() -> FastMCP:
    """–°–æ–∑–¥–∞—Ç—å –∏ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä."""
    service = TinkoffMCPService()
    service.initialize()
    return service.mcp


def main() -> None:
    """Entry point –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞."""
    import asyncio

    server = create_server()
    asyncio.run(server.run())  # type: ignore[func-returns-value]


if __name__ == "__main__":
    main()
