"""Tinkoff Invest MCP Server implementation."""

import os
from collections.abc import Generator
from contextlib import contextmanager, suppress
from datetime import datetime
from typing import Any

import fastmcp.utilities.logging
from fastmcp import FastMCP
from tinkoff.invest import Client
from tinkoff.invest.constants import INVEST_GRPC_API, INVEST_GRPC_API_SANDBOX
from tinkoff.invest.schemas import CandleInterval, InstrumentIdType
from tinkoff.invest.services import Services

from .models import (
    CandlesResponse,
    CashBalanceResponse,
    CreateOrderRequest,
    Instrument,
    LastPricesResponse,
    OperationsResponse,
    Order,
    OrderBookResponse,
    OrderResponse,
    PortfolioResponse,
    TradingStatusResponse,
)


class TinkoffMCPService:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π MCP —Å–µ—Ä–≤–∏—Å –¥–ª—è Tinkoff Invest API."""

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.logger = fastmcp.utilities.logging.get_logger("tinkoff-invest-mcp")
        self.logger.info("üöÄ Initializing Tinkoff Invest MCP Service...")

        self.mcp = FastMCP("Tinkoff Invest MCP Server")
        self.client = None
        self._initialized = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å —Ç–∏–ø–∞–º–∏
        self.token: str | None = None
        self.account_id: str | None = None
        self.mode: str = "sandbox"
        self.app_name: str = "tinkoff-invest-mcp"
        self.target: str | None = None

    def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è tools."""
        if self._initialized:
            return

        self.logger.info("üîß Setting up Tinkoff client...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ environment
        self.token = os.environ.get("TINKOFF_TOKEN")
        if not self.token:
            raise ValueError("Required environment variable 'TINKOFF_TOKEN' not set")

        self.account_id = os.environ.get("TINKOFF_ACCOUNT_ID")
        if not self.account_id:
            raise ValueError(
                "Required environment variable 'TINKOFF_ACCOUNT_ID' not set"
            )

        self.mode = os.environ.get("TINKOFF_MODE", "sandbox")
        self.app_name = os.environ.get("TINKOFF_APP_NAME", "tinkoff-invest-mcp")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º API target
        self.target = (
            INVEST_GRPC_API_SANDBOX if self.mode == "sandbox" else INVEST_GRPC_API
        )

        # –ù–µ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∑–¥–µ—Å—å, —Å–æ–∑–¥–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        self.client = None

        self.logger.info("üìã Registering MCP tools...")
        self._register_tools()
        self.logger.info("‚úÖ All tools registered successfully")

        self._initialized = True
        self.logger.info("üéØ Tinkoff Invest MCP Service ready to serve!")

    def cleanup(self) -> None:
        """Graceful shutdown –∫–ª–∏–µ–Ω—Ç–∞."""
        if self.client:
            self.logger.info("üîå Closing Tinkoff client connection...")  # type: ignore[unreachable]
            self.client.close()
            self.client = None
            self._initialized = False

    @contextmanager
    def _client_context(self) -> Generator[Services, None, None]:
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º."""
        if not self._initialized:
            raise RuntimeError("Service not initialized. Call initialize() first.")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        if not self.token:
            raise RuntimeError("Token is not set")
        client = Client(self.token, target=self.target, app_name=self.app_name)
        try:
            with client as client_instance:
                yield client_instance
        finally:
            # –ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –≤ with
            pass

    def _register_tools(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö MCP tools."""
        # Portfolio tools
        self.mcp.tool()(self.get_portfolio)
        self.mcp.tool()(self.get_cash_balance)

        # Operations tools
        self.mcp.tool()(self.get_operations)

        # Market data tools
        self.mcp.tool()(self.get_last_prices)
        self.mcp.tool()(self.get_candles)
        self.mcp.tool()(self.get_order_book)
        self.mcp.tool()(self.get_trading_status)

        # Orders tools
        self.mcp.tool()(self.get_orders)
        self.mcp.tool()(self.create_order)
        self.mcp.tool()(self.cancel_order)

        # Instruments tools
        self.mcp.tool()(self.find_instrument)
        self.mcp.tool()(self.get_instrument_by_uid)
        self.mcp.tool()(self.get_shares)
        self.mcp.tool()(self.get_bonds)
        self.mcp.tool()(self.get_etfs)

    # Portfolio methods
    def get_portfolio(self) -> PortfolioResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ:
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        - –°—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏ –∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
        - –û–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (P&L) –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        - –û–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è

        Returns:
            PortfolioResponse: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        """
        with self._client_context() as client:
            if not self.account_id:
                raise RuntimeError("Account ID is not set")
            response = client.operations.get_portfolio(account_id=self.account_id)
            return PortfolioResponse.from_tinkoff(response)

    def get_cash_balance(self) -> CashBalanceResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω–µ–∂–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ –≤–∞–ª—é—Ç–∞–º.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö:
        - –û–±—â—É—é —Å—É–º–º—É –ø–æ –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–µ
        - –î–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ –∑–∞—è–≤–∫–∞—Ö
        - –û–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö

        Returns:
            CashBalanceResponse: –ë–∞–ª–∞–Ω—Å—ã –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º
        """
        with self._client_context() as client:
            if not self.account_id:
                raise RuntimeError("Account ID is not set")
            response = client.operations.get_positions(account_id=self.account_id)
            return CashBalanceResponse.from_tinkoff(response)

    # Operations methods
    def get_operations(
        self,
        instrument_uid: str | None = None,
        from_date: str | None = None,
        to_date: str | None = None,
    ) -> OperationsResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Å—á–µ—Ç—É.

        Args:
            instrument_uid: UID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            from_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 (YYYY-MM-DD)
            to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 (YYYY-MM-DD)

        Returns:
            OperationsResponse: –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        """
        with self._client_context() as client:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            from_dt = (
                datetime.fromisoformat(from_date.replace("Z", "+00:00"))
                if isinstance(from_date, str)
                else from_date
            )
            to_dt = (
                datetime.fromisoformat(to_date.replace("Z", "+00:00"))
                if isinstance(to_date, str)
                else to_date
            )

            if not self.account_id:
                raise RuntimeError("Account ID is not set")
            response = client.operations.get_operations(
                account_id=self.account_id,
                figi=instrument_uid or "",
                from_=from_dt,
                to=to_dt,
            )
            return OperationsResponse.from_tinkoff(response)

    # Market data methods
    def get_last_prices(self, instrument_uids: list[str]) -> LastPricesResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º.

        Args:
            instrument_uids: –°–ø–∏—Å–æ–∫ UID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

        Returns:
            LastPricesResponse: –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        """
        with self._client_context() as client:
            response = client.market_data.get_last_prices(instrument_id=instrument_uids)
            return LastPricesResponse.from_tinkoff(response)

    def get_candles(
        self,
        instrument_uid: str,
        interval: str,
        from_date: str,
        to_date: str,
    ) -> CandlesResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É.

        Args:
            instrument_uid: UID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π (1min, 5min, 15min, hour, day)
            from_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
            to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601

        Returns:
            CandlesResponse: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ enum
        interval_map = {
            "1min": CandleInterval.CANDLE_INTERVAL_1_MIN,
            "5min": CandleInterval.CANDLE_INTERVAL_5_MIN,
            "15min": CandleInterval.CANDLE_INTERVAL_15_MIN,
            "hour": CandleInterval.CANDLE_INTERVAL_HOUR,
            "day": CandleInterval.CANDLE_INTERVAL_DAY,
        }

        candle_interval = interval_map.get(interval)
        if not candle_interval:
            raise ValueError(f"Unsupported interval: {interval}")

        with self._client_context() as client:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            from_dt = (
                datetime.fromisoformat(from_date.replace("Z", "+00:00"))
                if isinstance(from_date, str)
                else from_date
            )
            to_dt = (
                datetime.fromisoformat(to_date.replace("Z", "+00:00"))
                if isinstance(to_date, str)
                else to_date
            )

            response = client.market_data.get_candles(
                figi=instrument_uid,
                interval=candle_interval,
                from_=from_dt,
                to=to_dt,
            )
            return CandlesResponse.from_tinkoff(response, instrument_uid, interval)

    def get_order_book(self, instrument_uid: str, depth: int = 10) -> OrderBookResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É.

        Args:
            instrument_uid: UID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            depth: –ì–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω)

        Returns:
            OrderBookResponse: –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É
        """
        with self._client_context() as client:
            response = client.market_data.get_order_book(
                figi=instrument_uid, depth=depth
            )
            return OrderBookResponse.from_tinkoff(response)

    def get_trading_status(self, instrument_uid: str) -> TradingStatusResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.

        Args:
            instrument_uid: UID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

        Returns:
            TradingStatusResponse: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
        """
        with self._client_context() as client:
            response = client.market_data.get_trading_status(figi=instrument_uid)
            return TradingStatusResponse.from_tinkoff(response)

    # Orders methods
    def get_orders(self) -> list[Order]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏.

        Returns:
            list[Order]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
        """
        with self._client_context() as client:
            if not self.account_id:
                raise RuntimeError("Account ID is not set")
            response = client.orders.get_orders(account_id=self.account_id)
            return [Order.from_tinkoff(order) for order in response.orders]

    def create_order(
        self,
        instrument_id: str,
        quantity: int,
        direction: str,
        order_type: str,
        price: float | None = None,
    ) -> OrderResponse:
        """–°–æ–∑–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –∑–∞—è–≤–∫—É.

        Args:
            instrument_id: ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (UID)
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (BUY/SELL)
            order_type: –¢–∏–ø –∑–∞—è–≤–∫–∏ (MARKET/LIMIT)
            price: –¶–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è LIMIT –∑–∞—è–≤–æ–∫)

        Returns:
            OrderResponse: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ
        """
        from decimal import Decimal

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        order_request = CreateOrderRequest(
            instrument_id=instrument_id,
            quantity=quantity,
            direction=direction,  # type: ignore
            order_type=order_type,  # type: ignore
            price=Decimal(str(price)) if price is not None else None,
        )

        with self._client_context() as client:
            if not self.account_id:
                raise RuntimeError("Account ID is not set")
            tinkoff_request = order_request.to_tinkoff_request(self.account_id)
            response = client.orders.post_order(**tinkoff_request)
            return OrderResponse.from_tinkoff(response)

    def cancel_order(self, order_id: str) -> dict[str, Any]:
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –∑–∞—è–≤–∫—É.

        Args:
            order_id: ID –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏
        """
        with self._client_context() as client:
            if not self.account_id:
                raise RuntimeError("Account ID is not set")
            response = client.orders.cancel_order(
                account_id=self.account_id, order_id=order_id
            )
            return {"success": True, "time": response.time.isoformat()}

    # Instruments methods
    def find_instrument(self, query: str) -> list[Instrument]:
        """–ù–∞–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ç–∏–∫–µ—Ä—É.

        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, —Ç–∏–∫–µ—Ä)

        Returns:
            list[Instrument]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        with self._client_context() as client:
            response = client.instruments.find_instrument(query=query)
            return [
                Instrument.from_tinkoff(instrument)
                for instrument in response.instruments
            ]

    def get_instrument_by_uid(self, uid: str) -> Instrument:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –ø–æ UID.

        Args:
            uid: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

        Returns:
            Instrument: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        """
        with self._client_context() as client:
            response = client.instruments.get_instrument_by(
                id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_UID, id=uid
            )
            return Instrument.from_tinkoff(response.instrument)

    def get_shares(self) -> list[Instrument]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ü–∏–π.

        Returns:
            list[Instrument]: –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π
        """
        with self._client_context() as client:
            response = client.instruments.shares()
            return [
                Instrument.from_tinkoff_share(share) for share in response.instruments
            ]

    def get_bonds(self) -> list[Instrument]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π.

        Returns:
            list[Instrument]: –°–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π
        """
        with self._client_context() as client:
            response = client.instruments.bonds()
            return [Instrument.from_tinkoff_bond(bond) for bond in response.instruments]

    def get_etfs(self) -> list[Instrument]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ETF.

        Returns:
            list[Instrument]: –°–ø–∏—Å–æ–∫ ETF
        """
        with self._client_context() as client:
            response = client.instruments.etfs()
            return [Instrument.from_tinkoff_etf(etf) for etf in response.instruments]


def create_server() -> FastMCP:
    """–°–æ–∑–¥–∞—Ç—å –∏ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä."""
    service = TinkoffMCPService()
    service.initialize()
    return service.mcp


def main() -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä."""
    mcp = create_server()
    with suppress(KeyboardInterrupt):
        mcp.run()


if __name__ == "__main__":
    main()
