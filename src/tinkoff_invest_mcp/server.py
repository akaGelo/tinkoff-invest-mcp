"""Tinkoff Invest MCP Server implementation."""

from collections.abc import Generator
from contextlib import contextmanager, suppress
from datetime import datetime
from decimal import Decimal

import fastmcp.utilities.logging
from fastmcp import FastMCP
from tinkoff.invest import Client
from tinkoff.invest.schemas import InstrumentIdType
from tinkoff.invest.services import Services

from .cache import InstrumentsCache
from .config import TinkoffConfig
from .constants import DEFAULT_INSTRUMENTS_LIMIT, DEFAULT_PAGINATION_OFFSET
from .models import (
    CancelOrderResponse,
    CancelStopOrderResponse,
    CandlesResponse,
    CashBalanceResponse,
    CreateOrderRequest,
    Instrument,
    LastPricesResponse,
    OperationsResponse,
    Order,
    OrderBookResponse,
    OrderResponse,
    PaginatedInstrumentsResponse,
    PortfolioResponse,
    StopOrderRequest,
    StopOrderResponse,
    StopOrdersResponse,
    TradingSchedulesResponse,
    TradingStatusResponse,
)
from .models.common import money_to_decimal
from .models.market_data import LastPrice
from .utils import CandleUtils, DateTimeUtils


class TinkoffMCPService:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π MCP —Å–µ—Ä–≤–∏—Å –¥–ª—è Tinkoff Invest API."""

    def __init__(self, config: TinkoffConfig | None = None) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞. –ï—Å–ª–∏ None, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ env
        """
        self.logger = fastmcp.utilities.logging.get_logger("tinkoff-invest-mcp")
        self.logger.info("üöÄ Initializing Tinkoff Invest MCP Service...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = config or TinkoffConfig.from_env()

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.logger.info(f"üìä Configuration: {self.config.mask_sensitive_data()}")

        self.mcp = FastMCP("Tinkoff Invest MCP Server")
        self._initialized = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self._cache = InstrumentsCache(self._client_context)

    def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è tools."""
        if self._initialized:
            return

        self.logger.info("üîß Setting up Tinkoff client...")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –≤ __init__
        self.logger.info("üìã Registering MCP tools...")
        self._register_tools()
        self.logger.info("‚úÖ All tools registered successfully")

        self._initialized = True
        self.logger.info("üéØ Tinkoff Invest MCP Service ready to serve!")

    def cleanup(self) -> None:
        """Graceful shutdown –∫–ª–∏–µ–Ω—Ç–∞."""
        self.logger.info("üîå Closing Tinkoff client connection...")
        self._initialized = False

    @contextmanager
    def _client_context(self) -> Generator[Services, None, None]:
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º."""
        if not self._initialized:
            raise RuntimeError("Service not initialized. Call initialize() first.")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        client = Client(
            self.config.token, target=self.config.target, app_name=self.config.app_name
        )
        with client as client_instance:
            yield client_instance

    def _get_instrument_info(self, uid: str) -> tuple[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∏ —Ç–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ UID.

        Args:
            uid: UID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

        Returns:
            tuple: (name, ticker) –∏–ª–∏ ("Unknown", "UNKNOWN") –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        return self._cache.get_instrument_info(uid)

    def _paginate_instruments(
        self, instruments: list[Instrument], limit: int, offset: int
    ) -> PaginatedInstrumentsResponse:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ —Å–ø–∏—Å–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.

        Args:
            instruments: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

        Returns:
            PaginatedInstrumentsResponse: –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        total = len(instruments)
        start_idx = offset
        end_idx = offset + limit

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        if start_idx >= total:
            paginated_instruments = []
        else:
            paginated_instruments = instruments[start_idx:end_idx]

        return PaginatedInstrumentsResponse.create(
            instruments=paginated_instruments,
            total=total,
            limit=limit,
            offset=offset,
        )

    def _register_tools(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö MCP tools."""
        # Portfolio tools
        self.mcp.tool()(self.get_portfolio)
        self.mcp.tool()(self.get_cash_balance)

        # Operations tools
        self.mcp.tool()(self.get_operations)

        # Market data tools
        self.mcp.tool()(self.get_last_prices)
        self.mcp.tool()(self.get_candles)
        self.mcp.tool()(self.get_order_book)
        self.mcp.tool()(self.get_trading_status)
        self.mcp.tool()(self.get_trading_schedules)

        # Orders tools
        self.mcp.tool()(self.get_orders)
        self.mcp.tool()(self.create_order)
        self.mcp.tool()(self.cancel_order)

        # Stop orders tools
        self.mcp.tool()(self.get_stop_orders)
        self.mcp.tool()(self.post_stop_order)
        self.mcp.tool()(self.cancel_stop_order)

        # Instruments tools
        self.mcp.tool()(self.find_instrument)
        self.mcp.tool()(self.get_instrument_by_uid)
        self.mcp.tool()(self.get_shares)
        self.mcp.tool()(self.get_bonds)
        self.mcp.tool()(self.get_etfs)

    # Portfolio methods
    def get_portfolio(self) -> PortfolioResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ:
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        - –°—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏ –∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
        - –û–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (P&L) –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        - –û–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è

        Returns:
            PortfolioResponse: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        """
        with self._client_context() as client:
            response = client.operations.get_portfolio(
                account_id=self.config.account_id
            )

            # –û–±–æ–≥–∞—â–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
            portfolio = PortfolioResponse.from_tinkoff(response)
            for position in portfolio.positions:
                name, ticker = self._get_instrument_info(position.instrument_id)
                position.instrument_name = name
                position.instrument_ticker = ticker

            return portfolio

    def get_cash_balance(self) -> CashBalanceResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω–µ–∂–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ –≤–∞–ª—é—Ç–∞–º.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö:
        - –û–±—â—É—é —Å—É–º–º—É –ø–æ –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–µ
        - –î–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ –∑–∞—è–≤–∫–∞—Ö
        - –û–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö

        Returns:
            CashBalanceResponse: –ë–∞–ª–∞–Ω—Å—ã –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º
        """
        with self._client_context() as client:
            response = client.operations.get_positions(
                account_id=self.config.account_id
            )
            return CashBalanceResponse.from_tinkoff(response)

    # Operations methods
    def get_operations(
        self,
        instrument_uid: str | None = None,
        from_date: str | None = None,
        to_date: str | None = None,
    ) -> OperationsResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Å—á–µ—Ç—É.

        Args:
            instrument_uid: UID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            from_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 (YYYY-MM-DD)
            to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 (YYYY-MM-DD)

        Returns:
            OperationsResponse: –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        """
        with self._client_context() as client:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            from_dt = DateTimeUtils.parse_iso_datetime(from_date) if from_date else None
            to_dt = DateTimeUtils.parse_iso_datetime(to_date) if to_date else None

            response = client.operations.get_operations(
                account_id=self.config.account_id,
                figi=instrument_uid or "",
                from_=from_dt,
                to=to_dt,
            )

            # –û–±–æ–≥–∞—â–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
            operations = OperationsResponse.from_tinkoff(response)
            for operation in operations.operations:
                if operation.instrument_id:
                    name, ticker = self._get_instrument_info(operation.instrument_id)
                    operation.instrument_name = name
                    operation.instrument_ticker = ticker

            return operations

    # Market data methods
    def get_last_prices(self, instrument_uids: list[str]) -> LastPricesResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º.

        Args:
            instrument_uids: –°–ø–∏—Å–æ–∫ UID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

        Returns:
            LastPricesResponse: –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        """
        with self._client_context() as client:
            response = client.market_data.get_last_prices(instrument_id=instrument_uids)

            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞–º–∏ –∏–∑ –∫—ç—à–∞
            enriched_prices = []
            for tinkoff_price in response.last_prices:
                name, ticker = self._get_instrument_info(tinkoff_price.instrument_uid)

                price = LastPrice(
                    instrument_id=tinkoff_price.instrument_uid,
                    instrument_name=name,
                    instrument_ticker=ticker,
                    price=money_to_decimal(tinkoff_price.price) or Decimal("0"),
                    time=tinkoff_price.time.isoformat() if tinkoff_price.time else "",
                )
                enriched_prices.append(price)

            return LastPricesResponse(prices=enriched_prices)

    def get_candles(
        self,
        instrument_uid: str,
        interval: str,
        from_date: str,
        to_date: str,
    ) -> CandlesResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É.

        Args:
            instrument_uid: UID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π (1min, 5min, 15min, hour, day)
            from_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
            to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601

        Returns:
            CandlesResponse: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ enum
        candle_interval = CandleUtils.get_candle_interval(interval)

        with self._client_context() as client:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            from_dt = DateTimeUtils.parse_iso_datetime(from_date)
            to_dt = DateTimeUtils.parse_iso_datetime(to_date)

            response = client.market_data.get_candles(
                instrument_id=instrument_uid,
                interval=candle_interval,
                from_=from_dt,
                to=to_dt,
            )

            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            candles = CandlesResponse.from_tinkoff(response, instrument_uid, interval)
            name, ticker = self._get_instrument_info(instrument_uid)
            candles.instrument_name = name
            candles.instrument_ticker = ticker

            return candles

    def get_order_book(self, instrument_uid: str, depth: int = 10) -> OrderBookResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É.

        Args:
            instrument_uid: UID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            depth: –ì–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω)

        Returns:
            OrderBookResponse: –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É
        """
        with self._client_context() as client:
            response = client.market_data.get_order_book(
                instrument_id=instrument_uid, depth=depth
            )

            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            order_book = OrderBookResponse.from_tinkoff(response)
            name, ticker = self._get_instrument_info(instrument_uid)
            order_book.instrument_name = name
            order_book.instrument_ticker = ticker

            return order_book

    def get_trading_status(self, instrument_uid: str) -> TradingStatusResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.

        Args:
            instrument_uid: UID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

        Returns:
            TradingStatusResponse: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
        """
        with self._client_context() as client:
            response = client.market_data.get_trading_status(
                instrument_id=instrument_uid
            )

            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            trading_status = TradingStatusResponse.from_tinkoff(response)
            name, ticker = self._get_instrument_info(instrument_uid)
            trading_status.instrument_name = name
            trading_status.instrument_ticker = ticker

            return trading_status

    def get_trading_schedules(
        self,
        exchange: str | None = None,
        from_date: str | None = None,
        to_date: str | None = None,
    ) -> TradingSchedulesResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤.

        Args:
            exchange: –ö–æ–¥ –±–∏—Ä–∂–∏ (MOEX, SPB). –ï—Å–ª–∏ None - –≤—Å–µ –±–∏—Ä–∂–∏
            from_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
            to_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ

        Returns:
            TradingSchedulesResponse: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        """
        with self._client_context() as client:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            from_dt = DateTimeUtils.parse_iso_datetime(from_date) if from_date else None
            to_dt = DateTimeUtils.parse_iso_datetime(to_date) if to_date else None

            response = client.instruments.trading_schedules(
                exchange=exchange or "",
                from_=from_dt,
                to=to_dt,
            )

            return TradingSchedulesResponse.from_tinkoff(response)

    # Orders methods
    def get_orders(self) -> list[Order]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏.

        Returns:
            list[Order]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
        """
        with self._client_context() as client:
            response = client.orders.get_orders(account_id=self.config.account_id)
            return [Order.from_tinkoff(order) for order in response.orders]

    def create_order(
        self,
        instrument_id: str,
        quantity: int,
        direction: str,
        order_type: str,
        price: str | float | int | None = None,
    ) -> OrderResponse:
        """–°–æ–∑–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –∑–∞—è–≤–∫—É.

        Args:
            instrument_id: ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (UID)
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
                - ORDER_DIRECTION_BUY –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                - ORDER_DIRECTION_SELL –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            order_type: –¢–∏–ø –∑–∞—è–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
                - ORDER_TYPE_MARKET –¥–ª—è —Ä—ã–Ω–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏
                - ORDER_TYPE_LIMIT –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
            price: –¶–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è ORDER_TYPE_LIMIT –∑–∞—è–≤–æ–∫). –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "15.475", —á–∏—Å–ª–æ 15.475 –∏–ª–∏ int 15

        Returns:
            OrderResponse: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ
        """
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        order_request = CreateOrderRequest(
            instrument_id=instrument_id,
            quantity=quantity,
            direction=direction,  # type: ignore
            order_type=order_type,  # type: ignore
            price=Decimal(str(price)) if price is not None else None,
        )

        with self._client_context() as client:
            tinkoff_request = order_request.to_tinkoff_request(self.config.account_id)
            response = client.orders.post_order(**tinkoff_request)
            return OrderResponse.from_tinkoff(response)

    def cancel_order(self, order_id: str) -> CancelOrderResponse:
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –∑–∞—è–≤–∫—É.

        Args:
            order_id: ID –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã

        Returns:
            CancelOrderResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏
        """
        with self._client_context() as client:
            response = client.orders.cancel_order(
                account_id=self.config.account_id, order_id=order_id
            )
            return CancelOrderResponse(
                success=True, time=getattr(response, "time", None)
            )

    # Stop orders methods
    def get_stop_orders(self) -> StopOrdersResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ø-–∑–∞—è–≤–æ–∫ –ø–æ —Å—á–µ—Ç—É.

        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ø-–∑–∞—è–≤–æ–∫ (stop-loss, take-profit, stop-limit).
        –°—Ç–æ–ø-–∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ–±—ã—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫.

        Returns:
            StopOrdersResponse: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ø-–∑–∞—è–≤–æ–∫
        """
        with self._client_context() as client:
            response = client.stop_orders.get_stop_orders(
                account_id=self.config.account_id
            )
            return StopOrdersResponse.from_tinkoff(response)

    def post_stop_order(
        self,
        instrument_id: str,
        quantity: int,
        direction: str,
        stop_order_type: str,
        stop_price: str | float | int,
        expiration_type: str,
        price: str | float | int | None = None,
        expire_date: str | None = None,
    ) -> StopOrderResponse:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ø-–∑–∞—è–≤–∫—É.

        –°–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ø-–∑–∞—è–≤–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
        - stop_order_type: STOP_ORDER_TYPE_TAKE_PROFIT –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        - stop_order_type: STOP_ORDER_TYPE_STOP_LOSS –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        - stop_order_type: STOP_ORDER_TYPE_STOP_LIMIT –¥–ª—è —Å—Ç–æ–ø-–ª–∏–º–∏—Ç–∞
        - direction: STOP_ORDER_DIRECTION_BUY –¥–ª—è –ø–æ–∫—É–ø–∫–∏, STOP_ORDER_DIRECTION_SELL –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        - expiration_type: STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL –¥–æ –æ—Ç–º–µ–Ω—ã
        - expiration_type: STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã

        Args:
            instrument_id: ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (UID)
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (STOP_ORDER_DIRECTION_BUY/SELL)
            stop_order_type: –¢–∏–ø —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏ (STOP_ORDER_TYPE_TAKE_PROFIT/STOP_LOSS/STOP_LIMIT)
            stop_price: –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "280.5", —á–∏—Å–ª–æ 280.5 –∏–ª–∏ int 280
            expiration_type: –¢–∏–ø —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ (GOOD_TILL_CANCEL/GOOD_TILL_DATE)
            price: –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è STOP_ORDER_TYPE_STOP_LIMIT). –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "275.0", —á–∏—Å–ª–æ 275.0 –∏–ª–∏ int 275
            expire_date: –î–∞—Ç–∞ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è GOOD_TILL_DATE)

        Returns:
            StopOrderResponse: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç–æ–ø-–∑–∞—è–≤–∫–µ
        """
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        stop_order_request = StopOrderRequest(
            instrument_id=instrument_id,
            quantity=quantity,
            direction=direction,  # type: ignore[arg-type]
            stop_order_type=stop_order_type,  # type: ignore[arg-type]
            stop_price=Decimal(str(stop_price)),
            expiration_type=expiration_type,  # type: ignore[arg-type]
            price=Decimal(str(price)) if price is not None else None,
            expire_date=datetime.fromisoformat(expire_date) if expire_date else None,
        )

        with self._client_context() as client:
            tinkoff_request = stop_order_request.to_tinkoff_request(
                self.config.account_id
            )
            response = client.stop_orders.post_stop_order(**tinkoff_request)
            return StopOrderResponse(
                success=True,
                stop_order_id=response.stop_order_id,
                order_request_id=getattr(response, "order_request_id", None),
            )

    def cancel_stop_order(self, stop_order_id: str) -> CancelStopOrderResponse:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç–æ–ø-–∑–∞—è–≤–∫—É –ø–æ –µ—ë ID.

        Args:
            stop_order_id: ID —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã

        Returns:
            CancelStopOrderResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏
        """
        with self._client_context() as client:
            response = client.stop_orders.cancel_stop_order(
                account_id=self.config.account_id, stop_order_id=stop_order_id
            )
            return CancelStopOrderResponse(
                success=True, time=getattr(response, "time", None)
            )

    # Instruments methods
    def find_instrument(self, query: str) -> list[Instrument]:
        """–ù–∞–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ç–∏–∫–µ—Ä—É.

        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, —Ç–∏–∫–µ—Ä)

        Returns:
            list[Instrument]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        with self._client_context() as client:
            response = client.instruments.find_instrument(query=query)
            return [
                Instrument.from_tinkoff(instrument)
                for instrument in response.instruments
            ]

    def get_instrument_by_uid(self, uid: str) -> Instrument:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –ø–æ UID.

        Args:
            uid: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

        Returns:
            Instrument: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        """
        with self._client_context() as client:
            response = client.instruments.get_instrument_by(
                id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_UID, id=uid
            )
            return Instrument.from_tinkoff(response.instrument)

    def get_shares(
        self,
        limit: int = DEFAULT_INSTRUMENTS_LIMIT,
        offset: int = DEFAULT_PAGINATION_OFFSET,
    ) -> PaginatedInstrumentsResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100000)
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)

        Returns:
            PaginatedInstrumentsResponse: –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π
        """
        shares = self._cache.get_instruments_by_type("share")
        return self._paginate_instruments(shares, limit, offset)

    def get_bonds(
        self,
        limit: int = DEFAULT_INSTRUMENTS_LIMIT,
        offset: int = DEFAULT_PAGINATION_OFFSET,
    ) -> PaginatedInstrumentsResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∏–≥–∞—Ü–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100000)
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)

        Returns:
            PaginatedInstrumentsResponse: –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π
        """
        bonds = self._cache.get_instruments_by_type("bond")
        return self._paginate_instruments(bonds, limit, offset)

    def get_etfs(
        self,
        limit: int = DEFAULT_INSTRUMENTS_LIMIT,
        offset: int = DEFAULT_PAGINATION_OFFSET,
    ) -> PaginatedInstrumentsResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ETF —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100000)
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)

        Returns:
            PaginatedInstrumentsResponse: –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ETF
        """
        etfs = self._cache.get_instruments_by_type("etf")
        return self._paginate_instruments(etfs, limit, offset)


def create_server() -> FastMCP:
    """–°–æ–∑–¥–∞—Ç—å –∏ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä."""
    service = TinkoffMCPService()
    service.initialize()
    return service.mcp


def main() -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä."""
    mcp = create_server()
    with suppress(KeyboardInterrupt):
        mcp.run()


if __name__ == "__main__":
    main()
