"""Tinkoff Invest MCP Server implementation."""

from collections.abc import Generator
from contextlib import contextmanager

import fastmcp.utilities.logging
from fastmcp import FastMCP
from tinkoff.invest import Client
from tinkoff.invest.services import Services

from .cache import InstrumentsCache
from .config import TinkoffConfig
from .services import (
    InstrumentsService,
    MarketDataService,
    OperationsService,
    OrdersService,
    PortfolioService,
    StopOrdersService,
)


class TinkoffMCPService:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π MCP —Å–µ—Ä–≤–∏—Å –¥–ª—è Tinkoff Invest API."""

    def __init__(self, config: TinkoffConfig | None = None) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞. –ï—Å–ª–∏ None, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ env
        """
        self.logger = fastmcp.utilities.logging.get_logger("tinkoff-invest-mcp")
        self.logger.info("üöÄ Initializing Tinkoff Invest MCP Service...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = config or TinkoffConfig.from_env()

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.logger.info(f"üìä Configuration: {self.config.mask_sensitive_data()}")

        self.mcp = FastMCP("Tinkoff Invest MCP Server")
        self._initialized = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self._cache = InstrumentsCache(self._client_context)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.portfolio_service = PortfolioService(self.config, self._cache)
        self.operations_service = OperationsService(self.config, self._cache)
        self.market_data_service = MarketDataService(self.config, self._cache)
        self.orders_service = OrdersService(self.config, self._cache)
        self.stop_orders_service = StopOrdersService(self.config, self._cache)
        self.instruments_service = InstrumentsService(self.config, self._cache)

    def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è tools."""
        if self._initialized:
            return

        self.logger.info("üîß Setting up Tinkoff client...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        for service in [
            self.portfolio_service,
            self.operations_service,
            self.market_data_service,
            self.orders_service,
            self.stop_orders_service,
            self.instruments_service,
        ]:
            service._set_initialized(True)

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –≤ __init__
        self.logger.info("üìã Registering MCP tools...")
        self._register_tools()
        self.logger.info("‚úÖ All tools registered successfully")

        self._initialized = True
        self.logger.info("üéØ Tinkoff Invest MCP Service ready to serve!")

    def cleanup(self) -> None:
        """Graceful shutdown –∫–ª–∏–µ–Ω—Ç–∞."""
        self.logger.info("üîå Closing Tinkoff client connection...")
        self._initialized = False

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        for service in [
            self.portfolio_service,
            self.operations_service,
            self.market_data_service,
            self.orders_service,
            self.stop_orders_service,
            self.instruments_service,
        ]:
            service._set_initialized(False)

    @contextmanager
    def _client_context(self) -> Generator[Services, None, None]:
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º."""
        if not self._initialized:
            raise RuntimeError("Service not initialized. Call initialize() first.")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        client = Client(
            self.config.token, target=self.config.target, app_name=self.config.app_name
        )
        with client as client_instance:
            yield client_instance

    def _register_tools(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö MCP tools –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤."""
        services = [
            self.portfolio_service,
            self.operations_service,
            self.market_data_service,
            self.orders_service,
            self.stop_orders_service,
            self.instruments_service,
        ]

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –∫–∞–∫ MCP tools
        for service in services:
            service_tools = service.get_mcp_tools()
            for tool_name, tool_method in service_tools.items():
                self.mcp.tool()(tool_method)
                self.logger.debug(
                    f"Registered tool: {tool_name} from {service.__class__.__name__}"
                )


def create_server() -> FastMCP:
    """–°–æ–∑–¥–∞—Ç—å –∏ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä."""
    service = TinkoffMCPService()
    service.initialize()
    return service.mcp


def main() -> None:
    """Entry point –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞."""
    import asyncio

    server = create_server()
    asyncio.run(server.run())  # type: ignore[func-returns-value]


if __name__ == "__main__":
    main()
